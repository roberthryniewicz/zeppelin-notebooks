{"paragraphs":[{"text":"%md\n\n![sv-image](https://raw.githubusercontent.com/roberthryniewicz/images/master/silicon_valley_corporation.jpg)\n\n## Apache Spark in 5 Minutes \n#### Exploring Silicon Valley Show Episodes Dataset\n\n**Level**: Beginner\n**Language**: Python\n**Requirements**: \n- [HDP 2.6](http://hortonworks.com/products/sandbox/) (or later)\n- Spark 2.x\n\n**Author**: Robert Hryniewicz","user":"admin","dateUpdated":"2018-04-17T23:12:29+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/roberthryniewicz/images/master/silicon_valley_corporation.jpg\" alt=\"sv-image\" /></p>\n<h2>Apache Spark in 5 Minutes</h2>\n<h4>Exploring Silicon Valley Show Episodes Dataset</h4>\n<p><strong>Level</strong>: Beginner<br/><strong>Language</strong>: Python<br/><strong>Requirements</strong>:<br/>- <a href=\"http://hortonworks.com/products/sandbox/\">HDP 2.6</a> (or later)<br/>- Spark 2.x</p>\n<p><strong>Author</strong>: Robert Hryniewicz</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277632_2046346976","id":"20161013-011142_1891215806","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:29+0000","dateFinished":"2018-04-17T23:12:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:713"},{"title":"Short Intro","text":"%md\n\nWelcome to a quick overview of Apache Spark with Sillicon Valley Episodes dataset. If you've never watched the Silicon Valley show you can learn more about it [here](https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series)). \n\nIn this notebook we will download the dataset (in JSON format) from an external github repository, ingest it into a Spark Dataset and perform basic analysis, filtering, and word count.","user":"admin","dateUpdated":"2018-04-17T23:12:34+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Welcome to a quick overview of Apache Spark with Sillicon Valley Episodes dataset. If you&rsquo;ve never watched the Silicon Valley show you can learn more about it [here](<a href=\"https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series))\">https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series))</a>. </p>\n<p>In this notebook we will download the dataset (in JSON format) from an external github repository, ingest it into a Spark Dataset and perform basic analysis, filtering, and word count.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277649_2052118210","id":"20161013-011155_1645524279","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:34+0000","dateFinished":"2018-04-17T23:12:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:714"},{"title":"New to Zeppelin?","text":"%md\n\nIf you haven't already, checkout the [Hortonworks Apache Zeppelin](https://hortonworks.com/apache/zeppelin/) page as well as the [Getting Started with Apache Zeppelin](http://hortonworks.com/hadoop-tutorial/getting-started-apache-zeppelin/) tutorial.\n\nYou will find the official Apache Zeppelin page [here](https://zeppelin.apache.org/).","user":"admin","dateUpdated":"2018-04-17T23:12:36+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If you haven&rsquo;t already, checkout the <a href=\"https://hortonworks.com/apache/zeppelin/\">Hortonworks Apache Zeppelin</a> page as well as the <a href=\"http://hortonworks.com/hadoop-tutorial/getting-started-apache-zeppelin/\">Getting Started with Apache Zeppelin</a> tutorial.</p>\n<p>You will find the official Apache Zeppelin page <a href=\"https://zeppelin.apache.org/\">here</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277649_2052118210","id":"20161014-155201_679736099","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:36+0000","dateFinished":"2018-04-17T23:12:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:715"},{"title":"New to Spark?","text":"%md\n\nApache Spark is a fast, in-memory data processing engine with elegant and expressive development APIs to allow data workers to efficiently execute streaming, machine learning or SQL workloads that require fast iterative access to datasets.\n\nIf you would like to learn more about Apache Spark visit:\n- [Official Apache Spark Page](http://spark.apache.org/)\n- [Hortonworks Apache Spark Page](http://hortonworks.com/apache/spark/)\n- [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html)","user":"admin","dateUpdated":"2018-04-17T23:12:41+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Apache Spark is a fast, in-memory data processing engine with elegant and expressive development APIs to allow data workers to efficiently execute streaming, machine learning or SQL workloads that require fast iterative access to datasets.</p>\n<p>If you would like to learn more about Apache Spark visit:<br/>- <a href=\"http://spark.apache.org/\">Official Apache Spark Page</a><br/>- <a href=\"http://hortonworks.com/apache/spark/\">Hortonworks Apache Spark Page</a><br/>- <a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html\">Hortonworks Apache Spark Docs</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277650_2053272456","id":"20161014-121442_628671851","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:41+0000","dateFinished":"2018-04-17T23:12:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:716"},{"title":"How to run a paragraph?","text":"%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.","user":"admin","dateUpdated":"2018-04-17T23:12:44+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>To run a paragraph in a Zeppelin notebook you can either click the <code>play</code> button (blue triangle) on the right-hand side or simply press <code>Shift + Enter</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277650_2053272456","id":"20161014-144044_1782842084","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:44+0000","dateFinished":"2018-04-17T23:12:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:717"},{"title":"What are Interpreters?","text":"%md\n\nIn the following paragraphs we are going to execute Spark code, run shell commands to download and move files, run sql queries etc. Each paragraph will start with `%` followed by an interpreter name, e.g. `%spark.pyspark` is a pyspark interpreter providing a REST inteface to Spark 2.x. Different interpreter names indicate what will be executed: code, markdown, html etc.This allows you to perform data ingestion, munging, wrangling, visualization, analysis, processing and more, all in one place!\n\nThroughtout this notebook we will use the following interpreters:\n\n- `%spark.pyspark` - pyspark interpreter to run Spark 2.x code written in Python\n- `%spark.sql` - Spark SQL interprter (to execute SQL queries against temporary tables in Spark)\n- `%angular` - Angular interpreter to run Angular and HTML code\n- `%md` - Markdown for displaying formatted text, links, and images\n\nTo learn more about Zeppelin interpreters check out this [link](https://zeppelin.apache.org/docs/0.5.6-incubating/manual/interpreters.html).","user":"admin","dateUpdated":"2018-04-17T23:12:48+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In the following paragraphs we are going to execute Spark code, run shell commands to download and move files, run sql queries etc. Each paragraph will start with <code>%</code> followed by an interpreter name, e.g. <code>%spark.pyspark</code> is a pyspark interpreter providing a REST inteface to Spark 2.x. Different interpreter names indicate what will be executed: code, markdown, html etc.This allows you to perform data ingestion, munging, wrangling, visualization, analysis, processing and more, all in one place!</p>\n<p>Throughtout this notebook we will use the following interpreters:</p>\n<ul>\n  <li><code>%spark.pyspark</code> - pyspark interpreter to run Spark 2.x code written in Python</li>\n  <li><code>%spark.sql</code> - Spark SQL interprter (to execute SQL queries against temporary tables in Spark)</li>\n  <li><code>%angular</code> - Angular interpreter to run Angular and HTML code</li>\n  <li><code>%md</code> - Markdown for displaying formatted text, links, and images</li>\n</ul>\n<p>To learn more about Zeppelin interpreters check out this <a href=\"https://zeppelin.apache.org/docs/0.5.6-incubating/manual/interpreters.html\">link</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277650_2053272456","id":"20161014-145714_450762590","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:48+0000","dateFinished":"2018-04-17T23:12:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:718"},{"title":"Verify Spark Version (should be 2.x)","text":"%spark.pyspark\n\nspark.version","user":"admin","dateUpdated":"2018-04-17T23:10:08+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277650_2053272456","id":"20161012-235330_1461856587","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:08+0000","dateFinished":"2018-04-17T23:10:08+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:719"},{"text":"%spark.pyspark\n\nimport urllib2\nfile = urllib2.urlopen(\"https://raw.githubusercontent.com/roberthryniewicz/datasets/master/svepisodes.json\")\nwith open('/tmp/svepisodes.json','wb') as output:\n  output.write(file.read())","user":"admin","dateUpdated":"2018-04-17T23:10:08+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277651_2052887708","id":"20180314-002825_508469821","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:08+0000","dateFinished":"2018-04-17T23:10:08+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:720"},{"title":"Load data into a Spark DataFrame","text":"%spark.pyspark\n\npath = \"file:///tmp/svepisodes.json\"\nsvEpisodes = spark.read.json(path)         # Create a DataFrame from JSON data (automatically infer schema and data types)","user":"admin","dateUpdated":"2018-04-17T23:10:08+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277651_2052887708","id":"20161012-200853_1560821654","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:08+0000","dateFinished":"2018-04-17T23:10:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:721"},{"title":"What are Datasets and DataFrames?","text":"%md\n\n**Datasets** and **DataFrames** are distributed collections of data created from a variety of sources: JSON and XML files, tables in Hive, external databases and more. Conceptually, they are equivalent to a table in a relational database or a DataFrame in R or Python. Key difference between the  Dataset and the DataFrame is that Datasets are strongly typed.\n\nThere are complex manipulations possible on Datasets and DataFrames, however they are beyond this quick guide.\n\nTo learn more about Datasets and DataFrames checkout this  [link](http://spark.apache.org/docs/2.0.0/sql-programming-guide.html#datasets-and-dataframes).","user":"admin","dateUpdated":"2018-04-17T23:12:53+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Datasets</strong> and <strong>DataFrames</strong> are distributed collections of data created from a variety of sources: JSON and XML files, tables in Hive, external databases and more. Conceptually, they are equivalent to a table in a relational database or a DataFrame in R or Python. Key difference between the Dataset and the DataFrame is that Datasets are strongly typed.</p>\n<p>There are complex manipulations possible on Datasets and DataFrames, however they are beyond this quick guide.</p>\n<p>To learn more about Datasets and DataFrames checkout this <a href=\"http://spark.apache.org/docs/2.0.0/sql-programming-guide.html#datasets-and-dataframes\">link</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277651_2052887708","id":"20161014-131031_180366265","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:53+0000","dateFinished":"2018-04-17T23:12:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:722"},{"title":"Print DataFrame Schema","text":"%spark.pyspark\n\nsvEpisodes.printSchema()","user":"admin","dateUpdated":"2018-04-17T23:10:08+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277651_2052887708","id":"20161012-202011_596248668","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:09+0000","dateFinished":"2018-04-17T23:10:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:723"},{"title":"Data Description","text":"%angular\n\n<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 70%;\n}\n\ntd, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\n\ntr:nth-child(even) {\n    background-color: #dddddd;\n}\n</style>\n</head>\n\n<table>\n<tbody>\n<tr>\n  <th></th>\n  <th>Column Name</th>\n  <th>Description</th>\n</tr><tr>\n  <td>1</td>\n  <td>Airdate</td>\n  <td>Date when an episode was aired</td>\n</tr><tr>\n  <td>2</td>\n  <td>Airstamp</td>\n  <td>Timestamp when an episode was aired</td>\n</tr><tr>\n  <td>3</td>\n  <td>Airtime</td>\n  <td>Length of an actual episode airtime (no commercials)</td>\n</tr><tr>\n  <td>4</td>\n  <td>Id</td>\n  <td>Unique show id</td>\n</tr><tr>\n  <td>5</td>\n  <td>Name</td>\n  <td>Name of an episode </td>\n</tr><tr>\n  <td>6</td>\n  <td>Number</td>\n  <td>Episode number</td>\n</tr><tr>\n  <td>7</td>\n  <td>Runtime</td>\n  <td>Total length of an episode (including commercials)</td>\n</tr><tr>\n  <td>8</td>\n  <td>Season</td>\n  <td>Show season</td>\n</tr><tr>\n  <td>9</td>\n  <td>Summary</td>\n  <td>Brief summary of an episode</td>\n</tr><tr>\n  <td>10</td>\n  <td>Url</td>\n  <td>Url where more information is available online about an episode</td>\n</tr>\n</tbody></table>\n\n</body>\n</html>\n","user":"admin","dateUpdated":"2018-04-17T23:12:59+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 70%;\n}\n\ntd, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\n\ntr:nth-child(even) {\n    background-color: #dddddd;\n}\n</style>\n</head>\n\n<table>\n<tbody>\n<tr>\n  <th></th>\n  <th>Column Name</th>\n  <th>Description</th>\n</tr><tr>\n  <td>1</td>\n  <td>Airdate</td>\n  <td>Date when an episode was aired</td>\n</tr><tr>\n  <td>2</td>\n  <td>Airstamp</td>\n  <td>Timestamp when an episode was aired</td>\n</tr><tr>\n  <td>3</td>\n  <td>Airtime</td>\n  <td>Length of an actual episode airtime (no commercials)</td>\n</tr><tr>\n  <td>4</td>\n  <td>Id</td>\n  <td>Unique show id</td>\n</tr><tr>\n  <td>5</td>\n  <td>Name</td>\n  <td>Name of an episode </td>\n</tr><tr>\n  <td>6</td>\n  <td>Number</td>\n  <td>Episode number</td>\n</tr><tr>\n  <td>7</td>\n  <td>Runtime</td>\n  <td>Total length of an episode (including commercials)</td>\n</tr><tr>\n  <td>8</td>\n  <td>Season</td>\n  <td>Show season</td>\n</tr><tr>\n  <td>9</td>\n  <td>Summary</td>\n  <td>Brief summary of an episode</td>\n</tr><tr>\n  <td>10</td>\n  <td>Url</td>\n  <td>Url where more information is available online about an episode</td>\n</tr>\n</tbody></table>\n\n</body>\n</html>"}]},"apps":[],"jobName":"paragraph_1524006277652_2050963963","id":"20161014-140056_345247395","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:12:59+0000","dateFinished":"2018-04-17T23:12:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:724"},{"title":"Show DataFrame Contents","text":"%spark.pyspark\n\nsvEpisodes.show()","user":"admin","dateUpdated":"2018-04-17T23:10:09+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277652_2050963963","id":"20161012-234401_1548074862","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:09+0000","dateFinished":"2018-04-17T23:10:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:725"},{"title":"Is there a more interactive way to display query results?","text":"%md\n\nShort answer, yes! The data displayed in the paragraph above isn't too interactive. To have a more dynamic experience, let's create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to run SQL queries to get back results.\n\nNote that the temporary view will reside in memory as long as the Spark session is alive.","user":"admin","dateUpdated":"2018-04-17T23:13:06+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Short answer, yes! The data displayed in the paragraph above isn&rsquo;t too interactive. To have a more dynamic experience, let&rsquo;s create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to run SQL queries to get back results.</p>\n<p>Note that the temporary view will reside in memory as long as the Spark session is alive.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277652_2050963963","id":"20161013-005846_439497469","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:13:03+0000","dateFinished":"2018-04-17T23:13:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:726"},{"title":"Create a Temporary View","text":"%spark.pyspark\n\n# Creates a temporary view\nsvEpisodes.createOrReplaceTempView(\"svepisodes\")","user":"admin","dateUpdated":"2018-04-17T23:10:11+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277652_2050963963","id":"20161012-202125_3295223","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:11+0000","dateFinished":"2018-04-17T23:10:11+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:727"},{"title":"So now what?","text":"%md\n\nAt this point we can run queries using a familiar SQL syntax against our newly registered `svepisodes` table. \n\nNote that although we are using a SQL syntax in the following paragraph it is translated and executed using the Spark engine with all the expected optimizations.","user":"admin","dateUpdated":"2018-04-17T23:13:07+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>At this point we can run queries using a familiar SQL syntax against our newly registered <code>svepisodes</code> table. </p>\n<p>Note that although we are using a SQL syntax in the following paragraph it is translated and executed using the Spark engine with all the expected optimizations.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277653_2050579214","id":"20161013-182547_1601163342","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:13:07+0000","dateFinished":"2018-04-17T23:13:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:728"},{"title":"View Data in an Interactive Table Format","text":"%spark.sql\n\nSELECT * FROM svepisodes ORDER BY season, number","user":"admin","dateUpdated":"2018-04-17T23:10:11+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"airdate","index":0,"aggr":"sum"}],"values":[{"name":"airstamp","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"airdate","index":0,"aggr":"sum"},"yAxis":{"name":"airstamp","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277653_2050579214","id":"20161013-005646_1818766386","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:11+0000","dateFinished":"2018-04-17T23:10:12+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:729"},{"title":"Can we do something useful?","text":"%md\n\nOK, so now let's run a slightly more complex SQL query on the underlying table data.","user":"admin","dateUpdated":"2018-04-17T23:13:11+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>OK, so now let&rsquo;s run a slightly more complex SQL query on the underlying table data.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277653_2050579214","id":"20161013-182951_885833546","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:13:11+0000","dateFinished":"2018-04-17T23:13:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:730"},{"title":"Total Number of Episodes","text":"%spark.sql\n\nSELECT count(1) AS TotalNumEpisodes FROM svepisodes","user":"admin","dateUpdated":"2018-04-17T23:10:11+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":4,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"TotalNumEpisodes","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"TotalNumEpisodes","index":0,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277653_2050579214","id":"20161017-235756_1441150850","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:12+0000","dateFinished":"2018-04-17T23:10:12+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:731"},{"title":"Number of Episodes per Season","text":"%spark.sql \n\nSELECT season, count(number) as episodes FROM svepisodes GROUP BY season","user":"admin","dateUpdated":"2018-04-17T23:10:12+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":8,"editorMode":"ace/mode/sql","editorHide":false,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"season","index":0,"aggr":"sum"}],"values":[{"name":"episodes","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"season","index":0,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277654_2051733461","id":"20161012-202204_1707933023","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:12+0000","dateFinished":"2018-04-17T23:10:14+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:732"},{"title":"Word Count on Episode Summaries","text":"%md\n\nNow let's perform a basic word-count on the summary column and find out which words occur most frequently. This should give us some indication on the popularity of certain characters and other relevant keywords in the context of the Sillicon Valley show.","user":"admin","dateUpdated":"2018-04-17T23:13:14+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let&rsquo;s perform a basic word-count on the summary column and find out which words occur most frequently. This should give us some indication on the popularity of certain characters and other relevant keywords in the context of the Sillicon Valley show.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277654_2051733461","id":"20161013-010351_1570854534","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:13:14+0000","dateFinished":"2018-04-17T23:13:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:733"},{"title":"Raw Word Count","text":"%spark.pyspark\n\n# select summaries & conver the DataFrame into a Resilient Distributed Dataset (RDD)\nsvSummaries = svEpisodes.select(\"summary\").rdd\n\n# split on flatten text, select words (split on whitespace), remove empty words, lowercase\nwords = svSummaries.flatMap(lambda text: text).flatMap(lambda line: line.split(\" \")).filter(lambda word: word != \"\").map(lambda word: word.lower())\n\n# preview result\nwords.take(10)","user":"admin","dateUpdated":"2018-04-17T23:10:12+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277654_2051733461","id":"20161013-000142_472015281","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:13+0000","dateFinished":"2018-04-17T23:10:14+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:734"},{"text":"%spark.pyspark\n\n# create word-number pairs\nwordNum = words.map(lambda word: (word, 1))\n\n# use reduce function to count number of words\nwordCount = wordNum.reduceByKey(lambda a, b: a + b)\n\n# return words with count > 10\nresult = wordCount.filter(lambda (word, count): count > 10).collect()\n\nprint result","user":"admin","dateUpdated":"2018-04-17T23:10:13+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277654_2051733461","id":"20180314-004901_1605242440","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:10:13+0000","dateFinished":"2018-04-17T23:10:15+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:735"},{"title":"Additional Resources","text":"%md\n\nWe hope you've enjoyed this brief intro to Apache Spark. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type=question) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.\n","user":"admin","dateUpdated":"2018-04-17T23:13:19+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":10,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We hope you&rsquo;ve enjoyed this brief intro to Apache Spark. Below are additional resources that you should find useful:</p>\n<ol>\n  <li><a href=\"http://hortonworks.com/tutorials/#tuts-developers\">Hortonworks Apache Spark Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n  <li><a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\">Hortonworks Community Connection (HCC)</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n  <li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html\">Hortonworks Apache Spark Docs</a> - official Spark documentation.</li>\n  <li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html\">Hortonworks Apache Zeppelin Docs</a> - official Zeppelin documentation.</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1524006277655_2051348712","id":"20160226-200649_425588199","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:13:18+0000","dateFinished":"2018-04-17T23:13:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:736"},{"text":"%angular\n</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>","user":"admin","dateUpdated":"2018-04-17T23:13:20+0000","config":{"tableHide":false,"editorSetting":{},"colWidth":2,"editorMode":"ace/mode/scala","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>"}]},"apps":[],"jobName":"paragraph_1524006277655_2051348712","id":"20161013-185141_1487979052","dateCreated":"2018-04-17T23:04:37+0000","dateStarted":"2018-04-17T23:13:20+0000","dateFinished":"2018-04-17T23:13:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:737"},{"text":"","user":"admin","dateUpdated":"2018-04-17T23:10:15+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524006277655_2051348712","id":"20161018-143930_1545375880","dateCreated":"2018-04-17T23:04:37+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:738"}],"name":"Spark-in-5-min-Berlin-CC","id":"2DC3Q27RP","angularObjects":{"2CYSFF4KX:shared_process":[],"2CZ7M5Z1U:shared_process":[],"2CZN4E536:shared_process":[],"2CXMXB6B9:shared_process":[],"2CX1UN2AM:shared_process":[],"2CVYP86A3:shared_process":[],"2CZPMT4AR:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}